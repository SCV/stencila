import { DefaultDOMElement } from 'substance'

import HostInstance from '../host/HostInstance'

export default class DocumentDocxConverter {

  static match (fileName) {
    return fileName.slice(-5) === '.docx'
  }

  importDocument(storer, buffer) {
    let mainFilePath = storer.getMainFilePath()
    let manifest = {
      "type": "document",
      "storage": {
        "external": storer.isExternal(),
        "storerType": storer.getType(),
        "archivePath": storer.getArchivePath(),
        "mainFilePath": mainFilePath,
        "contentType": "docx",
      },
      "createdAt": new Date(),
      "updatedAt": new Date()
    }
    return storer.readFile(
      mainFilePath,
      'text/html'
    ).then(docx => {
      let html = `<!DOCTYPE html>
<html>
  <head>
    <title></title>
  </head>
  <body>
    <main>
      <div id="data" data-format="html">
        <div class="content">${this.importContent(docx)}</div>
      </div>
    </main>
  </body>
</html>`
      return buffer.writeFile(
        'index.html',
        'text/html',
        html
      )
    }).then(() => {
      return buffer.writeFile(
        'stencila-manifest.json',
        'application/json',
        JSON.stringify(manifest, null, '  ')
      )
    }).then(() => {
      return manifest
    })
  }

  /**
   * Import a document from Pandoc HTML (generated by
   * converting a docx to HTML) to Stencila HTML
   * 
   * @param  {string} phtml   Pandoc HTML
   * @param  {Object} options Conversion options
   * @return {string}         Stencila HTML
   */
  importContent (phtml, options = {}) {
    // Convert `<div class="footnotes"><ol>` items to 
    return html
  }

  exportDocument(buffer, storer, options = {}) {
    return buffer.readFile('index.html', 'text/html').then((html) => {
      let filePath = storer.getArchivePath() + '/' + storer.getMainFilePath()
      this.exportDocx(html, filePath, options).then(docx => {
        return storer.writeFile(storer.getMainFilePath(), 'text/plain', docx)
      })
    })
  }

  exportDocx(html, filePath, options={}){
    if (!options.converter) options.converter = 'pandoc'

    let phtml = this.exportContent(html)

    if (options.converter === 'pandoc') {
      return HostInstance.post('Pandoc').then(pandoc => {
        // This assumes that the filesystem converter is being used so that we
        // can get pandoc to output directly to a file. But the alternative is to 
        // get pandoc to return bytes, so that they can be written to any storer
        return pandoc.call('convert', phtml, 'html', 'docx', { output: filePath }).then(() => {
          return null // Return null to signal that storer should not write file
        })
      })
    } else {
      // This is only here for being able to test this independently of running
      // a peer which provides Pandoc
      return Promise.resolve(`DocumentDocxConverter.exportDocument was run with converter: ${options.converter}`)
    }
  }

  /**
   * Export a document from Stencila HTML to Pandoc HTML
   * so that we can use Pandoc to convert to docx
   * 
   * @param  {string} html    Stencila HTML
   * @param  {Object} options Conversion options
   * @return {string}         Pandoc HTML
   */
  exportContent (html, options = {}) {

    let doc = DefaultDOMElement.parseHTML(html)
    let content = doc.find('.content')
    if (!content) content = doc
    let $$ = tag => content.createElement(tag)

    let footnotes = $$('ol')

    for (let input of content.findAll('input')) {
      let index = footnotes.children.length + 1

      let name = input.attr('name')
      let value = input.attr('value')
      
      let parent = input.getParent()
      let a = parent.createElement('a').attr({
        href: `#fn${index}`,
        class: 'footnoteRef',
        id: `fnref${index}`
      }).append(
        $$('sup').text(`${index}`)
      )
      parent.insertBefore(parent.createTextNode(value), input)
      parent.replaceChild(input, a)

      let footnote = $$('li').attr({
        id: `fn${index}`
      }).append(
        $$('a').attr('href', `#fnref${index}`).text('â†©')
      )
      footnotes.append(footnote)
    }

    if (footnotes.children.length) {
      content.append(
        $$('div').addClass('footnotes').append(footnotes)
      )
    }

    return content.getInnerHTML()
  }
}
